<!DOCTYPE html>
<html>
<head>
    <%- include ../common/head.ejs %>
    <style>
        strong.warning{
            display: block;
            font-size: 0.8em;
            color: red;
        }
    </style>
</head>
    <%- include ../common/nav.ejs %>
<body>
    <h1>회원가입 입니다</h1>

    <form action="" method="POST" id="signupForm" enctype="multipart/form-data">
        <p>
            id : <input type="text" name="id">
            <strong class="warning"></strong>
        </p>
        <p>
            pw : <input type="password" name="pw">
            <strong class="warning"></strong>
        </p>
        <p>
            이름 : <input type="text" name="name">
            <strong class="warning"></strong>
        </p>
        <p>
            나이 : <input type="number" name="age">
            <strong class="warning"></strong>
        </p>
        <p>
            성별<br>
            남 : <input type="radio" name="gender" value="M">
            여 : <input type="radio" name="gender" value="F">
            <strong class="warning"></strong>
        </p>
            <input name="PostCode" type="text" id="sample6_postcode" placeholder="우편번호">
            <input type="button" onclick="sample6_execDaumPostcode()" value="우편번호 찾기"><br>
            <input name="address1" type="text" id="sample6_address" placeholder="주소">
            <input name="address2" type="text" id="sample6_address2" placeholder="상세주소">
        <p>
            <!-- multiple 로 되어있으면 파일 여러개 선택 가능 -->
            프로필 사진 : <input type="file" name="profile">  
        </p>
        <p>
            <button type="submit">회원가입</button>
        </p>
    </form>

    <%- include ../common/js.ejs %>
 
    <!--autoload=false 파라미터를 이용하여 자동으로 로딩되는 것을 막습니다.-->
    <script src="http://dmaps.daum.net/map_js_init/postcode.v2.js"></script>
    <script>
        function sample6_execDaumPostcode() {
            new daum.Postcode({
                oncomplete: function(data) {
                    // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.

                    // 각 주소의 노출 규칙에 따라 주소를 조합한다.
                    // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.
                    var fullAddr = ''; // 최종 주소 변수
                    var extraAddr = ''; // 조합형 주소 변수

                    // 사용자가 선택한 주소 타입에 따라 해당 주소 값을 가져온다.
                    if (data.userSelectedType === 'R') { // 사용자가 도로명 주소를 선택했을 경우
                        fullAddr = data.roadAddress;

                    } else { // 사용자가 지번 주소를 선택했을 경우(J)
                        fullAddr = data.jibunAddress;
                    }

                    // 사용자가 선택한 주소가 도로명 타입일때 조합한다.
                    if(data.userSelectedType === 'R'){
                        //법정동명이 있을 경우 추가한다.
                        if(data.bname !== ''){
                            extraAddr += data.bname;
                        }
                        // 건물명이 있을 경우 추가한다.
                        if(data.buildingName !== ''){
                            extraAddr += (extraAddr !== '' ? ', ' + data.buildingName : data.buildingName);
                        }
                        // 조합형주소의 유무에 따라 양쪽에 괄호를 추가하여 최종 주소를 만든다.
                        fullAddr += (extraAddr !== '' ? ' ('+ extraAddr +')' : '');
                    }

                    // 우편번호와 주소 정보를 해당 필드에 넣는다.
                    document.getElementById('sample6_postcode').value = data.zonecode; //5자리 새우편번호 사용
                    document.getElementById('sample6_address').value = fullAddr;

                    // 커서를 상세주소 필드로 이동한다.
                    document.getElementById('sample6_address2').focus();
                }
            }).open();
        }   
 
    var rule = [
        {
            name : 'id',
            ele : $('#signupForm input[name=id]'),
            Pattern : /^([0-9a-zA-Z_]){2,8}$/,
            message : '아이디 형식을 확인하세요.'
        },
        {
            name : 'pw',
            ele : $('#signupForm input[name=pw]'),
            Pattern : /^([0-9a-zA-Z_]){2,8}$/,
            message : '패스워드 형식을 확인하세요.'
        },
        {
            name : 'name',
            ele : $('#signupForm input[name=name]'),
            Pattern : /^([가-힣a-zA-Z]){1,20}$/,
            message : '이름 형식을 확인하세요.'
        },
        {
            name : 'age',
            ele : parseInt($('#signupForm input[name=age]')),
            Pattern : /^([0-9]){1,}$/,
            message : '나이 형식을 확인하세요.'
        },
        {
            name : 'gender',
            ele : $("#signupForm input[name=gender]:checked"),
            Pattern : null,
            message : '성별을 선택하세요.'
        }
    ]


    $('#signupForm input').on('keyup', function(){
        var nameAttr = $(this).attr('name')
        validKeyup($(this), nameAttr)
    })

    function validKeyup(self, nameAttr){
        var nowEle = {}
        for(var ele of rule){
            if(ele.name === nameAttr){
                nowEle = ele
                break
            }
        }
        if(!nowEle.ele.val() || !nowEle.Pattern.test(nowEle.ele.val())){
            self.next().text(nowEle.message)
            return false
        }else{
            self.next().html('')
        }
        return true
        
    }


    $('#signupForm').on('submit', function(){
        return valid()
    })

    function valid(){
        for(var ele of rule){
            if(!ele.ele.val() || !ele.Pattern.test(ele.ele.val())){
                alert(ele.message)
                return false
            }
        }
        return true
    }

    </script>
</body>
</html>